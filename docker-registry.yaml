---
# YAML version used to generate JSON version
# YAML version contains comments.
# To generate JSON version, run:
#   ruby -ryaml -rjson -e "puts JSON.pretty_generate(YAML.load(STDIN))" < docker-registry.yml > docker-registry.json
AWSTemplateFormatVersion: '2010-09-09'
Description: Launches a Docker Registry
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - cc2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - cr1.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
  Ami:
    # Ubuntu 14.04 amd64 hvm ebs-ssd images from
    # http://cloud-images.ubuntu.com/releases/14.04/release-20140607.1/published-ec2-release.txt.orig
    Description: "The EC2 AMI to use. See http://cloud-images.ubuntu.com/locator/ec2/"
    Type: String
    Default: ami-8827efe0
  DnsPrefix:
    Description: Prefix for the registry's DNS record (<prefix>.<zone>)
    Type: String
    Default: docker
  DnsZone:
    Description: Route53-hosted zone to use for the registry's DNS record (<prefix>.<zone>)
    Type: String
  DockerImage:
    Description: 'Path of the Docker Registry image to use (format: ''[<registry>[:<port>]/]<repository>[:<version>]'')'
    Type: String
    Default: registry
  S3Bucket:
    Description: Bucket to use for Docker images (e.g., 'mycompany-docker')
    Type: String
  SslCertificate:
    Description: ARN of an existing SSL certificate on AWS (e.g., 'arn:aws:iam::123456789:server-certificate/docker.mycompany.com')
    Type: String
  Subnets:
    Description: List of VPC subnet IDs for the cluster
    Type: CommaDelimitedList
  AvailabilityZones:
    Description: Availability zones for the cluster
    Type: CommaDelimitedList
  VpcId:
    Description: VPC associated with the provided subnets
    Type: String
  RegistryAuth:
    Description: Comma-delimited list of htpasswd strings that grant access to the
      registry (e.g., 'user1:$apr1$BspgNsum$8ZdGQ/KXRFccnlRXF6StP.,user2:$apr1$BspgNsum$8ZdGQ/KXRFccnlRXF6StP.')
    Type: CommaDelimitedList
  AdminSecurityGroup:
    Description: Existing security group that should be granted administrative access
      (e.g., 'sg-123456')
    Type: String

Resources:

  # Use a role and instance profile for cfn-init and cfn-signal
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: s3:*
              Resource:
                Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: S3Bucket
                  - "/*"
            - Effect: Allow
              Action: s3:*
              Resource:
                Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: S3Bucket


  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: Role

  ServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Ref: AvailabilityZones
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Cooldown: 120
      LoadBalancerNames:
      - Ref: ElasticLoadBalancer
      VPCZoneIdentifier:
        Ref: Subnets
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/nginx/sites-available/docker-registry":
              content:
                Fn::Join:
                - |2+

                - - upstream docker-registry {
                  - "  server localhost:5000;"
                  - "}"
                  - ''
                  - server {
                  - "  listen 80;"
                  - ''
                  - "  proxy_set_header Host       $http_host;   # required for docker
                    client's sake"
                  - "  proxy_set_header X-Real-IP  $remote_addr; # pass on real client's
                    IP"
                  - "  "
                  - "  client_max_body_size 0; # disable any limits to avoid HTTP
                    413 for large image uploads"
                  - ''
                  - "  chunked_transfer_encoding on;"
                  - ''
                  - "  location / {"
                  - '    auth_basic "Restricted";'
                  - "    auth_basic_user_file /opt/docker-registry/htpasswd;"
                  - "    proxy_pass http://docker-registry;"
                  - "  }"
                  - ''
                  - "  location /v1/_ping {"
                  - "    # Workaround fig errors pinging without credentials"
                  - '    auth_basic off;'
                  - "    proxy_pass http://docker-registry;"
                  - "  }"
                  - ''
                  - "  location /health {"
                  - "    empty_gif;"
                  - "  }"
                  - "}"
              mode: '000644'
              owner: root
              group: root
            "/opt/docker-registry/htpasswd":
              content:
                Fn::Join:
                - |2+

                - Ref: RegistryAuth
              mode: '000644'
              owner: root
              group: root
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: Ami
      SecurityGroups:
      - Ref: ServerSecurityGroup
      - Ref: AdminSecurityGroup
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile:
        Ref: InstanceProfile
      InstanceType:
        Ref: InstanceType
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''

          - [
          "#!/bin/bash -ex\n",

          "apt-get update\n",
          "apt-get install -y nginx python-setuptools runit unattended-upgrades\n",
          "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
          "curl -s https://get.docker.io/ubuntu/ | sh\n",

          "# Automatic security updates\n",
          "cat > /etc/apt/apt.conf.d/20auto-upgrades <<EOF\n",
          "APT::Periodic::Update-Package-Lists \"1\";\n",
          "APT::Periodic::Unattended-Upgrade \"1\";\n",
          "EOF\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r LaunchConfig ",
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Set up docker registry\n",
          "docker pull ", { "Ref": "DockerImage" }, "\n",
          "mkdir -p /etc/sv/docker-registry\n",
          "cat > /etc/sv/docker-registry/run <<EOF\n",
          "#!/bin/sh\n",
          "exec docker run",
          " --rm",
          " -p 5000:5000",
          " -e AWS_BUCKET=", { Ref: S3Bucket },
          " -e STORAGE_REDIRECT=True",
          " -e SETTINGS_FLAVOR=prod",
          "  ", { "Ref": "DockerImage" }, "\n",
          "EOF\n",
          "chmod +x /etc/sv/docker-registry/run\n",
          "ln -sf /etc/sv/docker-registry /etc/service/\n",
          "sleep 5\n", # Give svscan time to notice the new service
          "sv restart docker-registry || error_exit 'Failed to launch Docker container'\n",

          "# Set up nginx proxy\n",
          "rm -f /etc/nginx/sites-enabled/default\n",
          "ln -sf /etc/nginx/sites-available/docker-registry /etc/nginx/sites-enabled/docker-registry\n",
          "service nginx restart\n",


          "# All is well so signal success\n",
          "cfn-signal -e 0 -r \"Stack setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",
        ]

  LbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Registry access
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Registry access
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId:
          Ref: LbSecurityGroup
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
      - Ref: LbSecurityGroup
      - Ref: AdminSecurityGroup
      Subnets:
        Ref: Subnets
      Listeners:
      - LoadBalancerPort: '443'
        Protocol: HTTPS
        InstancePort: '80'
        InstanceProtocol: HTTP
        SSLCertificateId:
          Ref: SslCertificate
      HealthCheck:
        Target: HTTP:80/health
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:
        Fn::Join:
        - ''
        - - Ref: DnsZone
          - "."
      Comment: Docker Registry
      Name:
        Fn::Join:
        - ''
        - - Ref: DnsPrefix
          - "."
          - Ref: DnsZone
          - "."
      Type: CNAME
      TTL: '60'
      ResourceRecords:
      - Fn::GetAtt:
        - ElasticLoadBalancer
        - DNSName

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

Outputs:
  DnsAddress:
    Description: Docker Registry
    Value:
      Ref: DnsRecord
